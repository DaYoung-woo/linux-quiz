import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { quizSaveApi, categoryListApi } from "../../api/api";
import { ReactComponent as Plus } from "../../assets/img/plus.svg";
import AlertPopup from "../../components/common/AlertPopup";
import { useQuery } from "@tanstack/react-query";

function QuizForm() {
  // Í∏∞Î≥∏ Í∞ùÏ≤¥
  const defaultQuiz = {
    category: "",
    quizNum: "",
    title: "",
    distractor1: "",
    distractor2: "",
    distractor3: "",
    distractor4: "",
    desc: "",
    answer: "",
  };
  // Î¨∏Ï†ú Î≤àÌò∏ ÏÉùÏÑ±
  const quizNums = Array.from({ length: 100 }, (_, index) => index + 1);
  const [addAlert, setAddAlert] = useState(false);
  const [formData, setFormData] = useState({ ...defaultQuiz, id: "" });
  const [btnDisabled, setDisabled] = useState(true);
  const navigation = useNavigate();

  // Ïπ¥ÌÖåÍ≥†Î¶¨ Î¶¨Ïä§Ìä∏ api ÏöîÏ≤≠
  const { status, data } = useQuery({
    queryKey: ["fetchCategoryList"],
    queryFn: () => categoryListApi(),
  });

  // Î™®Îã¨ Îã´Í≥† Î©îÏù∏ ÌôîÎ©¥ Ïù¥Îèô
  const closeAddAlert = () => {
    setAddAlert(false);
    navigation("/admin/quiz_list");
  };

  const getFile = (e) => {
    console.log(e);
  };

  // Ï†ÄÏû• Î≤ÑÌäº ÌÅ¥Î¶≠
  const submitForm = (e) => {
    e.preventDefault();
    addQuiz();
  };

  // Ï†ÄÏû• api ÏöîÏ≤≠
  const addQuiz = async () => {
    const param = {
      id: `${formData.category}${formData.quizNum}`,
      ...formData,
      year: formData.category.split("-")[0],
      order: formData.category.split("-")[1],
    };
    try {
      await quizSaveApi(param);
      setAddAlert(true);
      setTimeout(() => closeAddAlert(), 2000);
    } catch (e) {
      alert("Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöîüò≠");
    }
  };

  // Ìèº ÏûÖÎ†• Í∞í Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handleChange = (e) => {
    const { name, value } = e.target;
    if (value === "loading") return;
    const newFormData = {
      ...formData,
      [name]: value,
    };
    setFormData(newFormData);

    const valid = Object.keys(newFormData)
      .filter((el) => el !== "id")
      .find((el) => !newFormData[el]);
    setDisabled(!!valid);
  };

  return (
    <div className="quiz-form">
      <h1>Î¨∏Ï†ú Ï∂îÍ∞Ä</h1>

      <form className="mt-5">
        <select
          name="category"
          value={formData.category}
          onChange={handleChange}
          required
          className="mr-4 border rounded-full px-2 py-1 w-40"
        >
          <option value="" disabled>
            Ïπ¥ÌÖåÍ≥†Î¶¨
          </option>
          {status === "pending" && (
            <option value="loading">...Î°úÎî©Ï§ëÏûÖÎãàÎã§.</option>
          )}
          {status === "success" &&
            data.map(({ year, order, id }) => (
              <option value={id} key={id}>
                {year}ÎÖÑÎèÑ {order}ÌöåÏ∞®
              </option>
            ))}
        </select>

        <select
          name="quizNum"
          value={formData.quizNum}
          onChange={handleChange}
          required
          className="mr-4 border rounded-full px-2 py-1 w-28"
        >
          <option value="" disabled>
            Î¨∏Ï†ú Î≤àÌò∏
          </option>

          {quizNums.map((el) => (
            <option value={el} key={el}>
              {el}
            </option>
          ))}
        </select>

        <div className="mt-6">
          <h4 className="mb-4">Î¨∏Ï†ú</h4>
          <input
            type="text"
            placeholder="Î¨∏Ï†ú"
            className="basic-input"
            name="title"
            value={formData.title}
            onChange={handleChange}
          />
          <input
            type="file"
            hidden
            id="upload-image"
            accept=".jpg, .jpeg, .png, .svg, image/*;capture=camera"
            onChange={(e) => getFile(e)}
          />

          <h4 className="pt-6">Î≥¥Í∏∞</h4>
          <input
            type="text"
            placeholder="Î≥¥Í∏∞1"
            className="basic-input mt-4"
            name="distractor1"
            value={formData.distractor1}
            onChange={handleChange}
          />
          <input
            type="text"
            placeholder="Î≥¥Í∏∞2"
            className="basic-input mt-4"
            name="distractor2"
            value={formData.distractor2}
            onChange={handleChange}
          />
          <input
            type="text"
            placeholder="Î≥¥Í∏∞3"
            className="basic-input mt-4"
            name="distractor3"
            value={formData.distractor3}
            onChange={handleChange}
          />
          <input
            type="text"
            placeholder="Î≥¥Í∏∞4"
            className="basic-input mt-4"
            name="distractor4"
            value={formData.distractor4}
            onChange={handleChange}
          />

          <h4 className="mt-6 flex items-center">
            Ìï¥ÏÑ§
            <select
              name="answer"
              value={formData.answer}
              onChange={handleChange}
              required
              className="ml-2 mr-4 border rounded-full px-2 py-1"
            >
              <option value="" disabled>
                Ï†ïÎãµ
              </option>
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
            </select>
          </h4>
          <textarea
            placeholder="Ìï¥ÏÑ§"
            className="border px-4 py-2 w-full mt-4"
            rows={10}
            name="desc"
            value={formData.desc}
            onChange={handleChange}
          />
          <div className="flex justify-end">
            <button
              className="mt-2 flex items-center pl-7 pr-8 py-2 bg-indigo-500 rounded-md text-slate-50 disabled:bg-slate-200 disabled:text-slate-400"
              onClick={(e) => submitForm(e)}
              disabled={btnDisabled}
            >
              <Plus
                fill={btnDisabled ? "#94a3b8" : "#ffffff"}
                width="24px"
                height="24px"
                className="mr-2 "
              />
              Î¨∏Ï†ú Îì±Î°ù
            </button>
          </div>
        </div>
      </form>
      <AlertPopup
        isOpen={addAlert}
        onRequestClose={closeAddAlert}
        title="Î¨∏Ï†úÎ•º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÌñàÏäµÎãàÎã§."
        desc="2Ï¥à Îí§ ÏûêÎèôÏúºÎ°ú Îã´ÌûôÎãàÎã§."
      />
    </div>
  );
}

export default QuizForm;
